# #import <...>
snippet sel
	@selector(${1:method}:)${3}
# @"..." string
snippet s
	@"${1}"${2}
# Object
snippet o
	${1:NSObject} *${2:foo} = [${3:$1 alloc}]${4};${5}
# NSLog(...)
snippet log
	NSLog(@"${1:%@}"${2});${3}
snippet init
	- (id)init {
		if (!(self = [super init])) return nil;
		${1}
		return self;
	}
# Method
snippet m
	- (${1:id})${2:method} {
		${3}
	}
# Method declaration
snippet md
	- (${1:id})${2:method};${3}
# for (object in array)
snippet forin
	for (${1:Class} *${2:some$1} in ${3:array}) {
		${4}
	}
snippet fore
	for (${1:object} in ${2:array}) {
		${3:statements}
	}
snippet forarray
	unsigned int ${1:object}Count = [${2:array} count];

	for (unsigned int index = 0; index < $1Count; index++) {
		${3:id} $1 = [$2 $1AtIndex:index];
		${4}
	}
snippet fora
	unsigned int ${1:object}Count = [${2:array} count];

	for (unsigned int index = 0; index < $1Count; index++) {
		${3:id} $1 = [$2 $1AtIndex:index];
		${4}
	}
# Try / Catch Block
snippet	@try
	@try {
		${1:statements}
	}
	@catch (NSException * e) {
		${2:handler}
	}
	@finally {
		${3:statements}
	}
snippet @catch
	@catch (${1:exception}) {
		${2:handler}
	}
snippet @finally
	@finally {
		${1:statements}
	}
# IBOutlet
# @property (Objective-C 2.0)
snippet prop
	@property (${1:nonatomic}) ${2:NSSomeClass} ${3:*$2};${4}
# @synthesize (Objective-C 2.0)
snippet syn
	@synthesize ${1:property};${2}
snippet a
	[[${1:foo} alloc] init${2}];${3}
snippet except
	NSException *${1:badness};
	$1 = [NSException exceptionWithName:@"${2:$1Name}"
	                             reason:@"${3}"
	                           userInfo:nil];
	[$1 raise];
snippet prag
	#pragma mark ${1:-}
snippet cl
	@class ${1:Foo};${2}
